<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.cn.hy" />

	<!-- 引入配置文件 -->
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="classpath:xmlconfig/jdbc.properties" /> 
		</bean> <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="${jdbc.dataSource.driver}" 
		/> <property name="url" value="${jdbc.dataSource.url}" /> <property name="username" 
		value="${jdbc.dataSource.username}" /> <property name="password" value="${jdbc.dataSource.password}" 
		/> 初始化连接大小 <property name="initialSize" value="${jdbc.dataSource.initialSize}"></property> 
		连接池最大数量 <property name="maxActive" value="${jdbc.dataSource.maxActive}"></property> 
		连接池最大空闲 <property name="maxIdle" value="${jdbc.dataSource.maxIdle}"></property> 
		连接池最小空闲 <property name="minIdle" value="${jdbc.dataSource.minIdle}"></property> 
		获取连接最大等待时间 <property name="maxWait" value="${jdbc.dataSource.maxWait}"></property> 
		</bean> -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/windpower_db?useUnicode=true&amp;characterEncoding=UTF8&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;zeroDateTimeBehavior=convertToNull" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
	</bean>
	<!-- myBatis文件 -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:xmlconfig/mybatis-config.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/cn/hy/mapping/*/*.xml" />
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cn.hy.dao" />
		<!-- 单数据库类型不需要配置工厂 -->
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
	</bean>
	<!-- Dao接口的第2种方式 -->
	<!-- <bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.springMyBatis.system.dao.UserDao"></property> 
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property> </bean> -->

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>



	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="insert*" propagation="REQUIRED" /> <tx:method 
		name="update*" propagation="REQUIRED" /> <tx:method name="delete*" propagation="REQUIRED" 
		/> <tx:method name="get*" propagation="SUPPORTS" read-only="true" /> <tx:method 
		name="find*" propagation="SUPPORTS" read-only="true" /> <tx:method name="select*" 
		propagation="SUPPORTS" read-only="true" /> </tx:attributes> </tx:advice> 
		Spring aop事务管理 <aop:config> <aop:pointcut id="transactionPointcut" expression="execution(* 
		org.andy.shop.service..*Impl.*(..))" /> <aop:advisor pointcut-ref="transactionPointcut" 
		advice-ref="transactionAdvice" /> </aop:config> -->



</beans>
